using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

using Agilent_U2542A_ExtensionBox;

using Motion;

using BreakJunctions.Events;

namespace BreakJunctions.Measurements
{
    class MeasureRealTimeTimeTrace : IDisposable
    {
        #region MeasureRealTimeTimeTrace settings

        private int _PointsPerBlock = 100000;
        /// <summary>
        /// The value of points per block for Agilent U2542A
        /// </summary>
        public int PointsPerBlock
        {
            get { return _PointsPerBlock; }
            set { _PointsPerBlock = value; }
        }

        private int _AcquistionRate = 500000;
        /// <summary>
        /// The value of points per second, generated by
        /// simultaneous data acquisition Agilent U2542A
        /// </summary>
        public int AcquistionRate
        {
            get { return _AcquistionRate; }
            set { _AcquistionRate = value; }
        }

        private bool _IsSample_01_MeasurementEnabled = true;
        /// <summary>
        /// Sample 01 measurement enable indicator
        /// </summary>
        public bool IsSample_01_MeasurementEnabled
        {
            get { return _IsSample_01_MeasurementEnabled; }
            set { _IsSample_01_MeasurementEnabled = value; }
        }

        private bool _IsSample_02_MeasurementEnabled = true;
        /// <summary>
        /// Sample 02 measurement enable indicator
        /// </summary>
        public bool IsSample_02_MeasurementEnabled
        {
            get { return _IsSample_02_MeasurementEnabled; }
            set { _IsSample_02_MeasurementEnabled = value; }
        }

        private AnalogInputChannels _Channels;

        private IRealTime_TimeTrace_Factory _ITimeTraceControllerFactory;
        private RealTime_TimeTrace_Controller _TimeTraceMeasurementControler;

        #endregion

        #region Constructor / Destructor

        public MeasureRealTimeTimeTrace()
        {
            _ITimeTraceControllerFactory = new RealTime_Agilent_U2542A_TimeTrace_Controller_Factory();
            _TimeTraceMeasurementControler = _ITimeTraceControllerFactory.GetRealTime_TimeTraceController(ImportantConstants.DeviceID);
        }

        ~MeasureRealTimeTimeTrace()
        {
            this.Dispose();
        }

        #endregion

        #region MeasureRealTimeTimeTrace functionality

        private void _initDAC()
        {
            _Channels = AnalogInputChannels.Instance;

            _Channels.DisableAllChannelsForContiniousDataAcquisition();
            _Channels.PointsPerBlock = this.PointsPerBlock;
            _Channels.ACQ_Rate = AcquistionRate;

            this.ReloadChannels();
        }

        private void ReloadChannels()
        {
            _Channels.DisableAllChannelsForContiniousDataAcquisition();
            if(_IsSample_01_MeasurementEnabled == true)
            {
                _Channels.ChannelArray[0].Enabled = true;
                _Channels.ChannelArray[1].Enabled = true;
            }
            else
            {
                _Channels.ChannelArray[0].Enabled = false;
                _Channels.ChannelArray[1].Enabled = false;
            }
            if (_IsSample_02_MeasurementEnabled == true)
            {
                _Channels.ChannelArray[2].Enabled = true;
                _Channels.ChannelArray[3].Enabled = true;
            }
            else
            {
                _Channels.ChannelArray[2].Enabled = false;
                _Channels.ChannelArray[3].Enabled = false;
            }
        }

        public void StartMeasurement(object sender, DoWorkEventArgs e, MotionKind motionKind, int numberOfRepetities = 1)
        {
            _initDAC();
            
            AllEventsHandler.Instance.OnRealTime_TimeTraceMeasurementStateChanged(null, new RealTime_TimeTraceMeasurementStateChanged_EventArgs(true));
            _TimeTraceMeasurementControler.ContiniousAcquisition();
        }

        public void StopMeasurement()
        {
            AllEventsHandler.Instance.OnRealTime_TimeTraceMeasurementStateChanged(null, new RealTime_TimeTraceMeasurementStateChanged_EventArgs(false));
        }

        #endregion

        #region Correctly disposing the instance

        public void Dispose()
        {
            _TimeTraceMeasurementControler.Dispose();
        }

        #endregion
    }
}
